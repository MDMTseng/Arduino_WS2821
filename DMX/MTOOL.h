#ifndef MTOOL_H
#define MTOOL_H

#include "Arduino.h"

#define CODE_(x)  pgm_read_byte_near(x)
prog_char  ss[] PROGMEM ={
  100,
  102,104,107,109,112,114,117,119,121,124,126,129,131,133,136,138,140,142,145,147,
  149,151,153,155,157,159,161,163,165,167,169,170,172,174,175,177,179,180,181,183,
  184,185,187,188,189,190,191,192,193,194,195,195,196,197,197,198,198,198,199,199,
  199,199,199,199,199,199,199,199,199,198,198,197,197,196,196,195,194,193,193,192,
  191,190,188,187,186,185,184,182,181,179,178,176,175,173,171,170,168,166,164,162,
  160,158,156,154,152,150,148,146,144,141,139,137,134,132,130,127,125,123,120,118,
  115,113,111,108,106,103,101,98,96,93,91,88,86,84,81,79,76,74,72,69,
  67,65,62,60,58,55,53,51,49,47,45,43,41,39,37,35,33,31,29,28,
  26,24,23,21,20,18,17,15,14,13,12,11,9,8,7,6,6,5,4,3,
  3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,
  2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,20,22,24,
  25,27,29,30,32,34,36,38,40,42,44,46,48,50,52,54,57,59,61,63,
  66,68,70,73,75,78,80,82,85,87,90,92,95,97,99};



prog_char   HR_TABLE[] PROGMEM =//For HSV MODEL
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,6,12,18,24,30,36,42,48,54,60,66,72,78,85,91,97,103,109,
  115,121,127,133,139,145,151,157,163,170,176,182,188,194,200,206,212,218,224,230,
  236,242,248,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,249,243,237,231,225,219,213,207,201,
  195,189,182,176,170,164,158,152,146,140,134,128,122,116,110,104,97,91,85,79,
  73,67,61,55,49,43,37,31,25,19,13,7,1,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


prog_char  LED_Compress_6b[] PROGMEM=//GAMMA
{
0,
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,
46,50,55,61,66,72,79,86,93,101,110,118,128,138,148,159,171,183,196,210,
224,239,255,};
prog_char   LED_Compress_6bINV[] PROGMEM=//GAMMA
{
0,
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,
41,41,41,41,41,42,42,42,42,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,46,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,};




void LED_DeCompress_6Bit_BACK(byte *Code,int CodeLength,byte *DeCBuff)
{
  int i=0;
  //DeCBuff+=(CodeLength<<2-CodeLength-1);//
  DeCBuff+=CodeLength*4/3-1;
  Code+=CodeLength;

  byte C1,C2,C3;
  for(;CodeLength;CodeLength-=3)// C1 C2 Code
  {
    Code-=3;
    C1=Code[0];
    C2=Code[1];
    C3=Code[2];


    *DeCBuff=CODE_(LED_Compress_6b+(C3&0x3F));
    DeCBuff--;

    *DeCBuff=CODE_(LED_Compress_6b+(((C2&0xF)<<2)|(C3>>6)));
    DeCBuff--;


    *DeCBuff=CODE_(LED_Compress_6b+(((C1&0x3)<<4)|(C2>>4)));
    DeCBuff--;

    *DeCBuff=CODE_(LED_Compress_6b+(C1>>2));
    DeCBuff--;



  }
}

void LED_Compress_6Bit(byte *Data,int DataLength,byte *Code)
{
  int i=0;

  byte C0,C1,C2,C3;
  for(;DataLength;DataLength-=4)// C1 C2 Code
  {
    C0=CODE_(LED_Compress_6bINV+Data[0]);
    C1=CODE_(LED_Compress_6bINV+Data[1]);
    C2=CODE_(LED_Compress_6bINV+Data[2]);
    C3=CODE_(LED_Compress_6bINV+Data[3]);
    //memset(Code,0,3);
    Code[0]=(C0<<2)|(C1>>4);
    Code[1]=(C1<<4)|(C2>>2);
    Code[2]=(C2<<6)|(C3);


    Code+=3;
    Data+=4;

  }
}


void LED_DeCompress_6Bit(byte *Code,int CodeLength,byte *DeCBuff)
{
  int i=0;
  for(;i<CodeLength;i+=3)
  {
    *DeCBuff=LED_Compress_6b[Code[i]>>1];
    DeCBuff++;

    *DeCBuff=LED_Compress_6b[((Code[i]&0x3)<<4)|(Code[i+1]>>4)];
    DeCBuff++;


    *DeCBuff=LED_Compress_6b[((Code[i+1]&0xF)<<2)|(Code[i+2]>>6)];
    DeCBuff++;

    *DeCBuff=LED_Compress_6b[Code[i+2]&0x3F];
    DeCBuff++;



  }
}
prog_char  GAMMA[] PROGMEM =//GAMMA
{
0,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,
2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,
7,7,7,8,8,8,9,9,9,10,10,11,11,11,12,12,13,13,14,14,
15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,23,23,24,24,25,
26,26,27,28,28,29,30,30,31,32,32,33,34,35,35,36,37,38,38,39,
40,41,42,42,43,44,45,46,47,47,48,49,50,51,52,53,54,55,56,56,
57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,
78,79,80,81,82,84,85,86,87,88,89,91,92,93,94,95,97,98,99,100,
102,103,104,105,107,108,109,111,112,113,115,116,117,119,120,121,123,124,126,127,
128,130,131,133,134,136,137,139,140,142,143,145,146,148,149,151,152,154,155,157,
158,160,162,163,165,166,168,170,171,173,175,176,178,180,181,183,185,186,188,190,
192,193,195,197,199,200,202,204,206,207,209,211,213,215,217,218,220,222,224,226,
228,230,232,233,235,237,239,241,243,245,247,249,251,253,255};



#endif

